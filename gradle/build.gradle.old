buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}


apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'idea'
apply plugin: 'maven'

allprojects {
    tasks.withType(JavaCompile).all {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = "$version.$build_number"
archivesBaseName = mod_name + "-" + mc_version

repositories {
    jcenter()
    maven {
        url "http://maven.bluexin.be/repository/snapshots/"
    }
    maven {
        url "http://maven.amadornes.com/"
    }
    maven {
        url "http://maven.shadowfacts.net/"
    }
    maven { url 'https://jitpack.io' }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven/'
    }
}

minecraft {
    version = "$mc_version-$forge_version"
    runDir = "run"
    mappings = mc_mappings

    clientJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]
    serverJvmArgs = ["-Dfml.coreMods.load=$core_plugin"]

    replace 'GRADLE:VERSION', mod_version
    replace 'GRADLE:BUILD', build_number

    replaceIn 'LibrarianLib.kt'
}

import net.minecraftforge.gradle.user.TaskSourceCopy

// Enables source replacements for Kotlin code
for (set in sourceSets) {
    if (set.name == "test") continue
    def taskName = "source${set.name.capitalize()}Kotlin"
    def dir = new File(project.buildDir, "sources/${set.name}/kotlin")
    task(taskName, type: TaskSourceCopy) {
        source = set.kotlin
        output = dir
    }
    def compileTask = tasks[set.getCompileTaskName("kotlin")]
    compileTask.source = dir
    compileTask.dependsOn taskName
    def dirPath = dir.toPath()
    compileKotlin.include {
        return it.file.toPath().startsWith(dirPath)
    }
}

configurations {
    required
    compile.extendsFrom(required)
}

dependencies {
    compile "net.shadowfacts:Forgelin:1.6.0"
}

compileKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = "1.8"
    }
}


jar {
    exclude 'com/teamwizardry/librarianlib/test', 'assets/librarianlibtest'
    from sourceSets.main.output

    archiveName "${archivesBaseName}-${version}.jar"
    dependsOn(configurations.getByName("compile") as Object)
    from {
        configurations.required.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes(
                "FMLCorePluginContainsFMLMod": "true",
                "FMLCorePlugin": "com.teamwizardry.librarianlib.asm.LibLibCorePlugin")
    }

}

task sourceJar(type: Jar, dependsOn: "sourceMainJava", overwrite: true) {
    from "src/main/java"
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives sourceJar
    archives deobfJar
}

idea {
    module {
        inheritOutputDirs = true

        sourceDirs += file('src/api/java')
        sourceDirs += file('src/test/java')
        sourceDirs += file('src/test/resources')
        setTestSourceDirs(new HashSet<File>())
    }
    project {
        languageLevel = '1.8'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

dokka {
    includes = ['Module.md']

    linkMapping {
        dir = "src/main/java"
        url = "https://github.com/TeamWizardry/LibrarianLib/tree/master/src/main/java"
        suffix = "#L"
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "$buildDir/dokkaJavadoc"
}

uploadArchives {
    repositories {
        if (System.getenv('REPO_PWD') != null) {
            mavenDeployer {
                repository(url: "http://maven.bluexin.be/repository/" + (((String) project.version).contains("SNAPSHOT") ? "snapshots" : "releases") + "/") {
                    authentication(userName: "travis", password: System.getenv('REPO_PWD'))
                }
            }
        } else {
            mavenDeployer {
                repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
                pom {
                    groupId = project.group
                    version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'LibrarianLib'
                        url 'https://github.com/TeamWizardry/LibrarianLib'
                        scm {
                            url 'https://github.com/TeamWizardry/LibrarianLib.git'
                            connection 'scm:git:git@github.com:TeamWizardry/LibrarianLib.git'
                            developerConnection 'scm:git:git@github.com:TeamWizardry/LibrarianLib.git'
                        }
                        issueManagement {
                            system 'github'
                            url 'https://github.com/TeamWizardry/LibrarianLib/issues'
                        }
                        developers {
                            developer {
                                id 'thecodewarrior'
                                name 'thecodewarrior'
                                roles { role 'developer' }
                            }
                            developer {
                                id 'wiresegal'
                                name 'wiresegal'
                                roles { role 'developer' }
                            }
                            developer {
                                id 'eladkay'
                                name 'eladkay'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}
